/*
Deployment script for Test

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PWC_LayoutProcessing"
:setvar DefaultFilePrefix "PWC_LayoutProcessing"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Schema [etl]...';


GO
CREATE SCHEMA [etl]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [model]...';


GO
CREATE SCHEMA [model]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [source]...';


GO
CREATE SCHEMA [source]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Table [etl].[InactiveItemConfig]...';


GO
CREATE TABLE [etl].[InactiveItemConfig] (
    [ID]                 INT           IDENTITY (1, 1) NOT NULL,
    [NotificationCode]   VARCHAR (255) NOT NULL,
    [ItemNumber]         VARCHAR (255) NOT NULL,
    [IgnoreInactiveTask] INT           NOT NULL,
    [IgnoreInactiveItem] INT           NOT NULL,
    CONSTRAINT [PK_InactiveItemConfig] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [U_InactiveItemConfig] UNIQUE NONCLUSTERED ([NotificationCode] ASC, [ItemNumber] ASC)
);


GO
PRINT N'Creating Table [etl].[InactiveTask]...';


GO
CREATE TABLE [etl].[InactiveTask] (
    [Id]      INT IDENTITY (1, 1) NOT NULL,
    [Task_Id] INT NOT NULL,
    CONSTRAINT [PK_Inactive] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [etl].[PlanningTaskCode]...';


GO
CREATE TABLE [etl].[PlanningTaskCode] (
    [Id]          INT IDENTITY (1, 1) NOT NULL,
    [TaskCode_Id] INT NOT NULL,
    CONSTRAINT [PK_PlanningTaskCode] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_TaskCode] UNIQUE NONCLUSTERED ([TaskCode_Id] ASC)
);


GO
PRINT N'Creating Table [etl].[Category]...';


GO
CREATE TABLE [etl].[Category] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [CategoryName] VARCHAR (100) NOT NULL,
    CONSTRAINT [PK_Category] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_Category] UNIQUE NONCLUSTERED ([CategoryName] ASC)
);


GO
PRINT N'Creating Table [etl].[TaskOwner]...';


GO
CREATE TABLE [etl].[TaskOwner] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [TaskOwner_Id] VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_TaskOwner] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_TO] UNIQUE NONCLUSTERED ([TaskOwner_Id] ASC)
);


GO
PRINT N'Creating Table [etl].[SupplierVendor]...';


GO
CREATE TABLE [etl].[SupplierVendor] (
    [Id]                INT           IDENTITY (1, 1) NOT NULL,
    [SupplierVendor_Id] VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_SupplierVendor] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_SV] UNIQUE NONCLUSTERED ([SupplierVendor_Id] ASC)
);


GO
PRINT N'Creating Table [etl].[LayoutProcessingTasks]...';


GO
CREATE TABLE [etl].[LayoutProcessingTasks] (
    [Id]                INT           IDENTITY (1, 1) NOT NULL,
    [Layout_Id]         INT           NOT NULL,
    [Task_Id]           VARCHAR (10)  NULL,
    [Material_Id]       INT           NOT NULL,
    [Created_On]        DATETIME2 (7) NULL,
    [Completed_On]      DATETIME2 (7) NULL,
    [Task_Text]         VARCHAR (500) NULL,
    [Task_Code_Id]      INT           NOT NULL,
    [Planned_Start]     DATETIME2 (7) NULL,
    [Planned_Finish]    DATETIME2 (7) NULL,
    [SupplierVendor_Id] INT           NOT NULL,
    [Task_Owner_Id]     INT           NOT NULL,
    [Task_Status_Id]    INT           NOT NULL,
    CONSTRAINT [PK_LayoutProcessing] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_Layout_Task] UNIQUE NONCLUSTERED ([Layout_Id] ASC, [Task_Id] ASC)
);


GO
PRINT N'Creating Table [etl].[TaskStatus]...';


GO
CREATE TABLE [etl].[TaskStatus] (
    [Id]         INT           IDENTITY (1, 1) NOT NULL,
    [TaskStatus] VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_TaskStatus] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_TaskStatus] UNIQUE NONCLUSTERED ([TaskStatus] ASC)
);


GO
PRINT N'Creating Table [etl].[Material]...';


GO
CREATE TABLE [etl].[Material] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [Material_Id] VARCHAR (255) NOT NULL,
    [Description] VARCHAR (500) NULL,
    [Category_Id] INT           NULL,
    CONSTRAINT [PK_Material] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_Material] UNIQUE NONCLUSTERED ([Material_Id] ASC)
);


GO
PRINT N'Creating Table [etl].[TaskCode]...';


GO
CREATE TABLE [etl].[TaskCode] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [TaskCode]     VARCHAR (255) NOT NULL,
    [TaskCodeText] VARCHAR (500) NULL,
    [GroupCode]    INT           NOT NULL,
    CONSTRAINT [PK_TaskCode] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_Group_Code] UNIQUE NONCLUSTERED ([GroupCode] ASC, [TaskCode] ASC)
);


GO
PRINT N'Creating Table [etl].[LayoutType]...';


GO
CREATE TABLE [etl].[LayoutType] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [Notification_Id] INT           NOT NULL,
    [Item_Number]     VARCHAR (10)  NOT NULL,
    [Layout_Text]     VARCHAR (500) NOT NULL,
    [DamageCode]      INT           NOT NULL,
    [CauseCode]       INT           NOT NULL,
    CONSTRAINT [PK_LayoutType] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_Notif_Item] UNIQUE NONCLUSTERED ([Notification_Id] ASC, [Item_Number] ASC)
);


GO
PRINT N'Creating Table [etl].[EngineProgram]...';


GO
CREATE TABLE [etl].[EngineProgram] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [Notification_Id] VARCHAR (255) NOT NULL,
    [Description]     VARCHAR (500) NOT NULL,
    [CodingCode]      INT           NOT NULL,
    CONSTRAINT [PK_EngineProgram] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_Notif] UNIQUE NONCLUSTERED ([Notification_Id] ASC)
);


GO
PRINT N'Creating Table [etl].[DamageCode]...';


GO
CREATE TABLE [etl].[DamageCode] (
    [Id]         INT           IDENTITY (1, 1) NOT NULL,
    [DamageCode] VARCHAR (10)  NOT NULL,
    [DamageText] VARCHAR (255) NULL,
    CONSTRAINT [PK_DamageCode] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_DamageCode] UNIQUE NONCLUSTERED ([DamageCode] ASC)
);


GO
PRINT N'Creating Table [etl].[CodingCode]...';


GO
CREATE TABLE [etl].[CodingCode] (
    [Id]         INT           IDENTITY (1, 1) NOT NULL,
    [Coding]     VARCHAR (255) NOT NULL,
    [CodingText] VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_CodingCode] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_CodingCode] UNIQUE NONCLUSTERED ([Coding] ASC)
);


GO
PRINT N'Creating Table [etl].[CodeGroup]...';


GO
CREATE TABLE [etl].[CodeGroup] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [GroupCode] VARCHAR (255) NOT NULL,
    [GroupText] VARCHAR (500) NULL,
    CONSTRAINT [PK_CodeGroup] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_GroupCode] UNIQUE NONCLUSTERED ([GroupCode] ASC)
);


GO
PRINT N'Creating Table [etl].[CauseCode]...';


GO
CREATE TABLE [etl].[CauseCode] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [CauseCode] VARCHAR (10)  NOT NULL,
    [CauseText] VARCHAR (255) NULL,
    CONSTRAINT [PK_CauseCode] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [U_CauseCode] UNIQUE NONCLUSTERED ([CauseCode] ASC)
);


GO
PRINT N'Creating Table [model].[TaskDurationPrediction]...';


GO
CREATE TABLE [model].[TaskDurationPrediction] (
    [ID]                INT           IDENTITY (1, 1) NOT NULL,
    [ModelDataInput_Id] INT           NOT NULL,
    [PredictionResult]  FLOAT (53)    NULL,
    [RunDate]           DATETIME2 (7) NOT NULL,
    CONSTRAINT [PK_TaskDurationPrediction] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [model].[SimilarityScore]...';


GO
CREATE TABLE [model].[SimilarityScore] (
    [ID]             INT           IDENTITY (1, 1) NOT NULL,
    [Layout_Id_Test] INT           NULL,
    [Layout_Id_Ref]  INT           NULL,
    [Seq_Test]       VARCHAR (MAX) NULL,
    [Seq_Ref]        VARCHAR (MAX) NULL,
    [Align_Seq_Test] VARCHAR (MAX) NULL,
    [Align_Seq_Ref]  VARCHAR (MAX) NULL,
    [Score]          FLOAT (53)    NULL,
    [Run_Date]       DATETIME2 (7) NULL,
    CONSTRAINT [PK_SimilarityScore] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Table [model].[GroupTaskCodeMatchMap]...';


GO
CREATE TABLE [model].[GroupTaskCodeMatchMap] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [CodeGroup]   VARCHAR (255) NOT NULL,
    [TaskCode]    VARCHAR (255) NOT NULL,
    [GeneralCode] VARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_GroupTaskCodeMatchMap] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UK_GroupTaskCodeMatchMap] UNIQUE NONCLUSTERED ([CodeGroup] ASC, [TaskCode] ASC)
);


GO
PRINT N'Creating Table [model].[CleanModelInput]...';


GO
CREATE TABLE [model].[CleanModelInput] (
    [ID]                 INT           IDENTITY (1, 1) NOT NULL,
    [NotificationCode]   VARCHAR (255) NOT NULL,
    [ItemNumber]         INT           NOT NULL,
    [LayoutTaskId]       INT           NOT NULL,
    [TaskNumber]         INT           NOT NULL,
    [MaterialCode]       VARCHAR (255) NOT NULL,
    [CreatedDate]        DATETIME2 (7) NOT NULL,
    [CompletedDate]      DATETIME2 (7) NULL,
    [TaskText]           VARCHAR (MAX) NULL,
    [TaskCodeId]         INT           NOT NULL,
    [TaskCode]           VARCHAR (255) NOT NULL,
    [TaskCodeText]       VARCHAR (MAX) NULL,
    [SupplierVendorId]   INT           NOT NULL,
    [SupplierVendorCode] VARCHAR (255) NOT NULL,
    [TaskOwnerId]        INT           NOT NULL,
    [TaskOwnerCode]      VARCHAR (255) NOT NULL,
    [PlannedStart]       DATETIME2 (7) NULL,
    [PlannedFinish]      DATETIME2 (7) NULL,
    [TaskStatusId]       INT           NOT NULL,
    [TaskStatusCode]     VARCHAR (255) NOT NULL,
    [DamageCodeId]       INT           NOT NULL,
    [DamageCode]         VARCHAR (255) NOT NULL,
    [CauseCodeId]        INT           NOT NULL,
    [CauseCode]          VARCHAR (255) NOT NULL,
    [GroupCodeId]        INT           NOT NULL,
    [GroupCode]          VARCHAR (255) NOT NULL,
    [CategoryId]         INT           NOT NULL,
    [Category]           VARCHAR (255) NOT NULL,
    [CodingCodeId]       INT           NOT NULL,
    [EngineProgram]      VARCHAR (255) NOT NULL,
    [GeneralCode]        VARCHAR (255) NULL,
    [IsTaskCompleted]    INT           NOT NULL,
    [IsItemCompleted]    INT           NOT NULL,
    [IsTurnback]         INT           NOT NULL,
    [IsLife]             INT           NOT NULL,
    [IsPlanning]         INT           NOT NULL,
    [Available]          INT           NOT NULL,
    [RunDate]            DATETIME2 (7) NOT NULL,
    CONSTRAINT [PK_CleanModelInput] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [etl].[InactiveItemConfig]...';


GO
ALTER TABLE [etl].[InactiveItemConfig]
    ADD DEFAULT 0 FOR [IgnoreInactiveTask];


GO
PRINT N'Creating Default Constraint unnamed constraint on [etl].[InactiveItemConfig]...';


GO
ALTER TABLE [etl].[InactiveItemConfig]
    ADD DEFAULT 0 FOR [IgnoreInactiveItem];


GO
PRINT N'Creating Default Constraint unnamed constraint on [etl].[Material]...';


GO
ALTER TABLE [etl].[Material]
    ADD DEFAULT 0 FOR [Category_Id];


GO
PRINT N'Creating Default Constraint unnamed constraint on [etl].[EngineProgram]...';


GO
ALTER TABLE [etl].[EngineProgram]
    ADD DEFAULT ('') FOR [Description];


GO
PRINT N'Creating Default Constraint unnamed constraint on [model].[TaskDurationPrediction]...';


GO
ALTER TABLE [model].[TaskDurationPrediction]
    ADD DEFAULT (-1) FOR [PredictionResult];


GO
PRINT N'Creating Default Constraint unnamed constraint on [model].[CleanModelInput]...';


GO
ALTER TABLE [model].[CleanModelInput]
    ADD DEFAULT ('') FOR [GeneralCode];


GO
PRINT N'Creating Foreign Key [etl].[FK_Inactive_Task]...';


GO
ALTER TABLE [etl].[InactiveTask] WITH NOCHECK
    ADD CONSTRAINT [FK_Inactive_Task] FOREIGN KEY ([Task_Id]) REFERENCES [etl].[LayoutProcessingTasks] ([Id]);


GO
PRINT N'Creating Foreign Key [etl].[FK_Planning]...';


GO
ALTER TABLE [etl].[PlanningTaskCode] WITH NOCHECK
    ADD CONSTRAINT [FK_Planning] FOREIGN KEY ([TaskCode_Id]) REFERENCES [etl].[TaskCode] ([Id]);


GO
PRINT N'Creating Foreign Key [etl].[FK_Layout_LayoutType]...';


GO
ALTER TABLE [etl].[LayoutProcessingTasks] WITH NOCHECK
    ADD CONSTRAINT [FK_Layout_LayoutType] FOREIGN KEY ([Layout_Id]) REFERENCES [etl].[LayoutType] ([Id]);


GO
PRINT N'Creating Foreign Key [etl].[FK_Layout_Material]...';


GO
ALTER TABLE [etl].[LayoutProcessingTasks] WITH NOCHECK
    ADD CONSTRAINT [FK_Layout_Material] FOREIGN KEY ([Material_Id]) REFERENCES [etl].[Material] ([Id]);


GO
PRINT N'Creating Foreign Key [etl].[FK_Layout_TaskCode]...';


GO
ALTER TABLE [etl].[LayoutProcessingTasks] WITH NOCHECK
    ADD CONSTRAINT [FK_Layout_TaskCode] FOREIGN KEY ([Task_Code_Id]) REFERENCES [etl].[TaskCode] ([Id]);


GO
PRINT N'Creating Foreign Key [etl].[FK_Layout_Supplier]...';


GO
ALTER TABLE [etl].[LayoutProcessingTasks] WITH NOCHECK
    ADD CONSTRAINT [FK_Layout_Supplier] FOREIGN KEY ([SupplierVendor_Id]) REFERENCES [etl].[SupplierVendor] ([Id]);


GO
PRINT N'Creating Foreign Key [etl].[FK_Layout_TaskOwner]...';


GO
ALTER TABLE [etl].[LayoutProcessingTasks] WITH NOCHECK
    ADD CONSTRAINT [FK_Layout_TaskOwner] FOREIGN KEY ([Task_Owner_Id]) REFERENCES [etl].[TaskOwner] ([Id]);


GO
PRINT N'Creating Foreign Key [etl].[FK_Layout_TaskStatus]...';


GO
ALTER TABLE [etl].[LayoutProcessingTasks] WITH NOCHECK
    ADD CONSTRAINT [FK_Layout_TaskStatus] FOREIGN KEY ([Task_Status_Id]) REFERENCES [etl].[TaskStatus] ([Id]);


GO
PRINT N'Creating Foreign Key [etl].[FK_Material_Category]...';


GO
ALTER TABLE [etl].[Material] WITH NOCHECK
    ADD CONSTRAINT [FK_Material_Category] FOREIGN KEY ([Category_Id]) REFERENCES [etl].[Category] ([Id]);


GO
PRINT N'Creating Foreign Key [etl].[FK_Group]...';


GO
ALTER TABLE [etl].[TaskCode] WITH NOCHECK
    ADD CONSTRAINT [FK_Group] FOREIGN KEY ([GroupCode]) REFERENCES [etl].[CodeGroup] ([Id]);


GO
PRINT N'Creating Foreign Key [etl].[FK_LayoutType_Notif]...';


GO
ALTER TABLE [etl].[LayoutType] WITH NOCHECK
    ADD CONSTRAINT [FK_LayoutType_Notif] FOREIGN KEY ([Notification_Id]) REFERENCES [etl].[EngineProgram] ([Id]);


GO
PRINT N'Creating Foreign Key [etl].[FK_LayoutType_DamageCode]...';


GO
ALTER TABLE [etl].[LayoutType] WITH NOCHECK
    ADD CONSTRAINT [FK_LayoutType_DamageCode] FOREIGN KEY ([DamageCode]) REFERENCES [etl].[DamageCode] ([Id]);


GO
PRINT N'Creating Foreign Key [etl].[FK_LayoutType_CauseCode]...';


GO
ALTER TABLE [etl].[LayoutType] WITH NOCHECK
    ADD CONSTRAINT [FK_LayoutType_CauseCode] FOREIGN KEY ([CauseCode]) REFERENCES [etl].[CauseCode] ([Id]);


GO
PRINT N'Creating Foreign Key [etl].[FK_EngProg_Coding]...';


GO
ALTER TABLE [etl].[EngineProgram] WITH NOCHECK
    ADD CONSTRAINT [FK_EngProg_Coding] FOREIGN KEY ([CodingCode]) REFERENCES [etl].[CodingCode] ([Id]);


GO
PRINT N'Creating Foreign Key [model].[FK_ModelInput]...';


GO
ALTER TABLE [model].[TaskDurationPrediction] WITH NOCHECK
    ADD CONSTRAINT [FK_ModelInput] FOREIGN KEY ([ModelDataInput_Id]) REFERENCES [model].[CleanModelInput] ([ID]);


GO
MERGE INTO [etl].[CauseCode] AS Target
USING (VALUES
			(1	 ,''    ,''),
			(2	 ,'L040','New Source'),
			(3	 ,'L020','Extension'),
			(4	 ,'L055','Previous Layout Expired'),
			(5	 ,'L010','Drawing Change'),
			(6	 ,'L060','Process Change'),
			(7	 ,'L030','New Part Number'),
			(8	 ,'S100','Tool/Die'),
			(9	 ,'L050','New Tool'),
			(10  ,'V900','Item DELETED'),
			(11  ,'S090','Process'),
			(12  ,'S110','Vendor Process'),
			(13  ,'L080','Rapid Prototype'),
			(14  ,'S040','Excess Material'),
			(15  ,'S030','Deviating Material'),
			(16  ,'P085','New Process = Casting Variation'),
			(17  ,'L070','Tool Repair/Rework')
	 )
AS Source (
			[Id],
		  	[CauseCode],
			[CauseText]
		 )
ON Source.[Id] = Target.[Id]

WHEN MATCHED THEN
UPDATE SET [CauseCode] = Source.[CauseCode],
		   [CauseText] = Source.[CauseText]


WHEN NOT MATCHED BY Target THEN
INSERT (
		[CauseCode],
		[CauseText]
		)
		VALUES
		(
		[CauseCode],
		[CauseText]
		)

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO [etl].[CodeGroup] AS Target
USING (VALUES
	    (1,'DATTACHM','Attachments to QN'),
		(2,'DEXPORTC','Export Control Classification'),
		(3,'DINSTRUC','Instructions for a Disposition'),
		(4,'DISQRPRO','QR Disposition (Production Material)'),
		(5,'DISQRX','QR Disposition (Development Material)'),
		(6,'ECCOMBUS','Combustion Component Center (Eng''r)'),
		(7,'ECCOMPR','Compressor Component Center (Eng''r)'),
		(8,'ECECN','ECN Component Center (Eng''r)'),
		(9,'ECMECHAN','Mechanical Component Center'),
		(10,'ECMSI','Mechanical Systems Integration (Eng''r)'),
		(11,'ECOPPER','Engr Performance, Fluids and Operability'),
		(12,'ECPC','ENSIP Critial Part Committee (ECPC)'),
		(13,'ECPCREV','Item Task submitted for ECPC Review'),
		(14,'ECRPC','Critical Parts Committee (CRPC)'),
		(15,'ECRPCREV','Item Task submitted for CRPC Review'),
		(16,'ECSTATIC','Static Structures'),
		(17,'ECTURBIN','Turbine Component Center (Eng''r)'),
		(18,'ECVE','Eng''g (Compliance Verification Engineer)'),
		(19,'EDAA','Eng''g (Design Approval Appointee)'),
		(20,'EDPCEAE','Eng''r.Design PCE Accessories'),
		(21,'EDPCECLD','Eng''r.Design PCE COLD End Module'),
		(22,'EDPCEHOT','Eng''r.Design PCE HOT End Module'),
		(23,'EDTPT6A','Engineering Dev''t Test PT6A'),
		(24,'EHOLDCOD','Engineering Holding Codes'),
		(25,'ELAYOUT','MAE Item Task for Layout Report'),
		(26,'EMATENGG','Eng''g (Material Engineering)'),
		(27,'EPAPS','Projects Auxiliary Power System'),
		(28,'EPCEWSKE','Eng''r.Design PCE ECN Module WSK'),
		(29,'EPJT15D','Projects JT15D'),
		(30,'EPMGR','Engineering Project Managers'),
		(31,'EPMINSTR','Proj. Mgr. Instruc. (non-flight engines)'),
		(32,'EPPT6A','Projects PT6A'),
		(33,'EPPT6C','Projects PT6C'),
		(34,'EPPT6E','Projects PT6E'),
		(35,'EPPT6T/B','Projects PT6T, PT6B'),
		(36,'EPPT9A','Projects PT9A'),
		(37,'EPPW100','Projects PW100'),
		(38,'EPPW1200','Projects PW1200G'),
		(39,'EPPW150','Projects PW150'),
		(40,'EPPW1500','Projects PW1500G'),
		(41,'EPPW200','Projects PW200'),
		(42,'EPPW210','Projects PW210'),
		(43,'EPPW220','Projects PW220'),
		(44,'EPPW305','Projects PW305/306'),
		(45,'EPPW307','Projects PW307'),
		(46,'EPPW308','Projects PW308'),
		(47,'EPPW500','Projects PW500'),
		(48,'EPPW610','Projects PW610'),
		(49,'EPPW615','Projects PW615'),
		(50,'EPPW617','Projects PW617'),
		(51,'EPPW812','Projects PW812'),
		(52,'EPPW814','Projects PW814'),
		(53,'EPPW815','Projects PW815'),
		(54,'EPPW900','Projects PW900'),
		(55,'EPROJMGR','Project Manager Non-Flight Engines'),
		(56,'EPRT','Projects Research Technology'),
		(57,'EPST18','Projects ST18, ST30, ST40'),
		(58,'EPSTO','Project Support to Operations'),
		(59,'EPSTONA','Project Support to Oper.(Non-Authorized)'),
		(60,'EQNCOORD','QN Co-Ordinator for Engineering'),
		(61,'ERELSAFE','Reliability Safety'),
		(62,'FATTS','Item Task for Assy Test'),
		(63,'FHALIBLA','Item Task for Halifax Blade Manuf''g'),
		(64,'FHALIC1','Item Task for Halifax Case Line 1 Mfg.'),
		(65,'FLAB','Item Task for Laboratory'),
		(66,'FLAYOUT','QS Item Task for Layout Report'),
		(67,'FMR','Item Task for Material Review'),
		(68,'FPID','Item Task for Parent Inspection Dep''t.'),
		(69,'FPLAN','Item Task for Methods Planning'),
		(70,'FPQCR','Item Task for PQCR'),
		(71,'FQR','Item Task for Quality Review'),
		(72,'FQRE','PWEH'),
		(73,'LIAV00','Vendor from 1000 to 9999'),
		(74,'PWCCAPA8','8 Step Request for Corr. / Prev. Action'),
		(75,'VAR','Various')
	)
AS Source (
			[Id],
		    [GroupCode],
			[GroupText]
		  )

ON Source.[Id] = Target.[Id]

WHEN MATCHED THEN
UPDATE SET [GroupCode] = Source.[GroupCode],
		   [GroupText] = Source.[GroupText]

WHEN NOT MATCHED BY Target THEN
INSERT (
		[GroupCode],
		[GroupText]
		)
		VALUES
		(
		Source.[GroupCode],
		Source.[GroupText]
		)

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO [etl].[CodingCode] AS Target
USING (VALUES
			(1, 'Z010'	,'Production Layout Report Tracking'),
			(2, 'Z020'	,'Experimental Layout Report Tracking'),
			(3, 'Z030'	,'Resourcing Layout Report Tracking'),
			(4, 'Z040'	,'Tooling Team Layout Report Tracking')
	)
AS Source (
			[Id],
		  	[Coding],
			[CodingText]
		 )
ON Source.[Id] = Target.[Id]

WHEN MATCHED THEN
UPDATE SET [Coding]		= Source.[Coding],
		   [CodingText] = Source.[CodingText]


WHEN NOT MATCHED BY Target THEN
INSERT (
		[Coding],
		[CodingText]
		)
		VALUES
		(
		[Coding],
		[CodingText]
		)

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO [etl].[DamageCode] AS Target
USING (VALUES
			(1, '10'	,'Layout Type Periodic'),
			(2, '20'	,'Layout Type Partial'),
			(3, '30'	,'Layout Type Initial'),
			(4, '40'	,'Layout Qual with PSIP'),
			(5, '0165'  ,'QN Item Void')
	)
AS Source (
			[Id],
		  	[DamageCode],
			[DamageText]
		 )
ON Source.[Id] = Target.[Id]

WHEN MATCHED THEN
UPDATE SET [DamageCode] = Source.[DamageCode],
		   [DamageText] = Source.[DamageText]


WHEN NOT MATCHED BY Target THEN
INSERT (
		[DamageCode],
		[DamageText]
		)
		VALUES
		(
		[DamageCode],
		[DamageText]
		)

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO [etl].[TaskCode] AS Target
USING (VALUES
	        (1,    'TKAT'	,1),
		    (2,    '0070'	,66),
		    (3,    '0080'	,66),
		    (4,    '0090'	,66),
		    (5,    '0010'	,2),
		    (6,    'VEND'	,66),
		    (7,    '0180'	,22),
		    (8,    '0050'	,71),
		    (9,    '0020'	,10),
		    (10,   '0030'	,17),
		    (11,   '0290'	,58),
		    (12,   '0068'	,19),
		    (13,   '0270'	,22),
		    (14,   '0030'	,70),
		    (15,   'LPA'	,66),
		    (16,   'VLML'	,66),
		    (17,   'PSUB'	,66),
		    (18,   'VLPS'	,66),
		    (19,   '0260'	,22),
		    (20,   '0050'	,17),
		    (21,   '0030'	,11),
		    (22,   '0300'	,58),
		    (23,   '0045'	,17),
		    (24,   '0120'	,10),
		    (25,   'SIGN'	,66),
		    (26,   '0010'	,66),
		    (27,   '0100'	,70),
		    (28,   '0030'	,66),
		    (29,   '0010'	,11),
		    (30,   '0020'	,66),
		    (31,   '0075'	,3),
		    (32,   '0110'	,66),
		    (33,   '0120'	,66),
		    (34,   'INAC'	,66),
		    (35,   '0300'	,59),
		    (36,   '1090'	,24),
		    (37,   '0040'	,19),
		    (38,   'WAIT'	,66),
		    (39,   '0060'	,32),
		    (40,   '0010'	,13),
		    (41,   '0010'	,12),
		    (42,   '0021'	,19),
		    (43,   '0280'	,22),
		    (44,   '0110'	,21),
		    (45,   '0300'	,21),
		    (46,   '0220'	,58),
		    (47,   '0020'	,16),
		    (48,   '0310'	,21),
		    (49,   '0100'	,66),
		    (50,   '0010'	,7),
		    (51,   '0030'	,7),
		    (52,   '1080'	,24),
		    (53,   '0010'	,26),
		    (54,   '0210'	,58),
		    (55,   '0250'	,22),
		    (56,   '0040'	,17),
		    (57,   '0060'	,37),
		    (58,   '0010'	,16),
		    (59,   '0340'	,58),
		    (60,   '0030'	,19),
		    (61,   '0020'	,70),
		    (62,   '0035'	,66),
		    (63,   '0060'	,70),
		    (64,   '0150'	,10),
		    (65,   '0350'	,58),
		    (66,   '0040'	,66),
		    (67,   '0240'	,21),
		    (68,   '0010'	,10),
		    (69,   '0510'	,59),
		    (70,   '0060'	,66),
		    (71,   'PDES'	,66),
		    (72,   '0340'	,59),
		    (73,   '0050'	,66),
		    (74,   '0080'	,22),
		    (75,   '0010'	,54),
		    (76,   '0420'	,58),
		    (77,   '0080'	,19),
		    (78,   '0220'	,21),
		    (79,   '0020'	,29),
		    (80,   '0055'	,21),
		    (81,   '0020'	,9),
		    (82,   '0170'	,58),
		    (83,   '0010'	,19),
		    (84,   '0020'	,22),
		    (85,   '0070'	,70),
		    (86,   '0095'	,66),
		    (87,   '1060'	,24),
		    (88,   '0010'	,75),
		    (89,   '1040'	,24),
		    (90,   '0022'	,19),
		    (91,   '0027'	,19),
		    (92,   '0030'	,22),
		    (93,   'TOOL'	,66),
		    (94,   '0070'	,49),
		    (95,   '0150'	,19),
		    (96,   '0230'	,22),
		    (97,   '0390'	,58),
		    (98,   '0040'	,58),
		    (99,   '0016'	,11),
		    (100,  '0025'	,6),
		    (101,  '0070'	,46),
		    (102,  '0066'	,19),
		    (103,  '7'		,74),
		    (104,  '0190'	,21),
		    (105,  '0020'	,37),
		    (106,  '0510'	,58),
		    (107,  '0520'	,58),
		    (108,  '0070'	,19),
		    (109,  '0125'	,66),
		    (110,  '0020'	,21),
		    (111,  '0040'	,32),
		    (112,  '0050'	,70),
		    (113,  '0080'	,59),
		    (114,  '0080'	,58),
		    (115,  '0010'	,25),
		    (116,  '0020'	,6),
		    (117,  '0040'	,22),
		    (118,  '0070'	,45),
		    (119,  '0229'	,69),
		    (120,  '0220'	,22),
		    (121,  '0370'	,58),
		    (122,  '0140'	,10),
		    (123,  '0020'	,39),
		    (124,  '0028'	,19),
		    (125,  '0035'	,17),
		    (126,  '0040'	,41),
		    (127,  '0130'	,59),
		    (128,  '0050'	,19),
		    (129,  '0040'	,59),
		    (130,  '0160'	,10),
		    (131,  '0020'	,61),
		    (132,  '0065'	,66),
		    (133,  '0065'	,19),
		    (134,  '0130'	,10),
		    (135,  '0200'	,21),
		    (136,  '0050'	,21),
		    (137,  '0030'	,21),
		    (138,  '0023'	,19),
		    (139,  '0330'	,58),
		    (140,  '0015'	,11),
		    (141,  '0029'	,19),
		    (142,  '0050'	,22),
		    (143,  '0330'	,59),
		    (144,  '0070'	,59),
		    (145,  '0290'	,59),
		    (146,  '0060'	,61),
		    (147,  '0240'	,58),
		    (148,  '1025'	,24),
		    (149,  '1010'	,24),
		    (150,  '0130'	,71),
		    (151,  '0020'	,59),
		    (152,  '0250'	,58),
		    (153,  '0190'	,22),
		    (154,  '0030'	,69),
		    (155,  '0090'	,59),
		    (156,  '0080'	,70),
		    (157,  '0210'	,59),
		    (158,  '0090'	,21),
		    (159,  '0030'	,10),
		    (160,  '0520'	,59),
		    (161,  '0080'	,46),
		    (162,  '0020'	,20),
		    (163,  '0015'	,10),
		    (164,  '0090'	,22),
		    (165,  '0410'	,59),
		    (166,  '0490'	,58),
		    (167,  '0010'	,6),
		    (168,  '0030'	,16),
		    (169,  '0020'	,46),
		    (170,  '0410'	,58),
		    (171,  '0250'	,69),
		    (172,  '0140'	,69),
		    (173,  'P050'	,68),
		    (174,  '0090'	,47),
		    (175,  '0320'	,21),
		    (176,  '1030'	,24),
		    (177,  '0110'	,59),
		    (178,  '0140'	,22),
		    (179,  '0060'	,71),
		    (180,  '0080'	,64),
		    (181,  '0010'	,69),
		    (182,  '0010'	,70),
		    (183,  '0132'	,71),
		    (184,  '0260'	,69),
		    (185,  '0120'	,70),
		    (186,  '0200'	,22),
		    (187,  '0020'	,60),
		    (188,  '0290'	,21),
		    (189,  '0100'	,59),
		    (190,  '0055'	,19),
		    (191,  '0110'	,30),
		    (192,  '0030'	,58),
		    (193,  '0010'	,17),
		    (194,  '0060'	,35),
		    (195,  '0060'	,33),
		    (196,  '0010'	,60),
		    (197,  '0110'	,63),
		    (198,  'P020'	,68),
		    (199,  '0260'	,58),
		    (200,  '0040'	,11),
		    (201,  '0360'	,58),
		    (202,  '0020'	,7),
		    (203,  '1000'	,24),
		    (204,  '0110'	,70),
		    (205,  '0170'	,19),
		    (206,  '0380'	,58),
		    (207,  '0080'	,62),
		    (208,  '0050'	,58),
		    (209,  '0040'	,70),
		    (210,  '0240'	,22),
		    (211,  '0110'	,10),
		    (212,  '0100'	,58),
		    (213,  '0012'	,58),
		    (214,  '0030'	,71),
		    (215,  '0012'	,19),
		    (216,  '0220'	,59),
		    (217,  '0020'	,26),
		    (218,  '0140'	,58),
		    (219,  '0130'	,58),
		    (220,  '0010'	,21),
		    (221,  '0110'	,58),
		    (222,  '0020'	,8),
		    (223,  '0010'	,28),
		    (224,  '0020'	,58),
		    (225,  '0230'	,21),
		    (226,  '0070'	,58),
		    (227,  '0040'	,7),
		    (228,  '0050'	,33),
		    (229,  '0170'	,61),
		    (230,  '0040'	,9),
		    (231,  '0034'	,70),
		    (232,  '0505'	,58),
		    (233,  '0014'	,58),
		    (234,  '0280'	,21),
		    (235,  '0050'	,61),
		    (236,  '0430'	,58),
		    (237,  '0260'	,21),
		    (238,  '0060'	,58),
		    (239,  '0010'	,22),
		    (240,  '0090'	,58),
		    (241,  '0160'	,22),
		    (242,  '0010'	,9),
		    (243,  '0115'	,21),
		    (244,  '0570'	,58),
		    (245,  '0120'	,61),
		    (246,  '0150'	,58),
		    (247,  '0070'	,22),
		    (248,  '0550'	,59),
		    (249,  '3299'	,73),
		    (250,  '0140'	,61),
		    (251,  '0310'	,58),
		    (252,  '0322'	,69),
		    (253,  '0020'	,11),
		    (254,  '0035'	,10),
		    (255,  '0040'	,61),
		    (256,  '0080'	,21),
		    (257,  '0010'	,57),
		    (258,  '0010'	,55),
		    (259,  '1100'	,24),
		    (260,  '0030'	,9),
		    (261,  '0150'	,21),
		    (262,  '0060'	,7),
		    (263,  '0090'	,7),
		    (264,  '0300'	,69),
		    (265,  '0030'	,26),
		    (266,  '0040'	,21),
		    (267,  '0050'	,32),
		    (268,  '0070'	,21),
		    (269,  '0050'	,69),
		    (270,  '0165'	,58),
		    (271,  '0250'	,21),
		    (272,  '0010'	,40),
		    (273,  '0060'	,42),
		    (274,  '0050'	,42),
		    (275,  '0030'	,8),
		    (276,  '0010'	,8),
		    (277,  '0010'	,48),
		    (278,  '0160'	,58),
		    (279,  '0280'	,58),
		    (280,  '0500'	,58),
		    (281,  'AC10'	,4),
		    (282,  '0010'	,15),
		    (283,  '0010'	,14),
		    (284,  '0100'	,21),
		    (285,  '0440'	,58),
		    (286,  '0430'	,72),
		    (287,  '0700'	,72),
		    (288,  '0100'	,22),
		    (289,  '0010'	,38),
		    (290,  '0080'	,44),
		    (291,  '0090'	,61),
		    (292,  'AC25'	,5),
		    (293,  '0130'	,22),
		    (294,  '0270'	,58),
		    (295,  '0540'	,58),
		    (296,  '0040'	,42),
		    (297,  '0010'	,50),
		    (298,  '0010'	,58),
		    (299,  '0060'	,50),
		    (300,  '0080'	,45),
		    (301,  '0020'	,47),
		    (302,  '0180'	,21),
		    (303,  '0040'	,33),
		    (304,  '0170'	,22),
		    (305,  '0480'	,58),
		    (306,  '0040'	,14),
		    (307,  '0470'	,58),
		    (308,  '0028'	,10),
		    (309,  '0015'	,19),
		    (310,  '0060'	,34),
		    (311,  '0090'	,52),
		    (312,  '0070'	,67),
		    (313,  '0020'	,32),
		    (314,  '0025'	,10),
		    (315,  '0045'	,37),
		    (316,  '0015'	,8),
		    (317,  '0070'	,37),
		    (318,  '0200'	,58),
		    (319,  '0020'	,45),
		    (320,  '0010'	,31),
		    (321,  '0010'	,42),
		    (322,  '0650'	,72),
		    (323,  '0220'	,61),
		    (324,  '0090'	,69),
		    (325,  '0080'	,61),
		    (326,  '1050'	,24),
		    (327,  '0020'	,53),
		    (328,  '0130'	,61),
		    (329,  '0110'	,22),
		    (330,  '0060'	,18),
		    (331,  '0300'	,30),
		    (332,  '1150'	,24),
		    (333,  '0130'	,69),
		    (334,  '0060'	,14),
		    (335,  '0030'	,27),
		    (336,  '0030'	,18),
		    (337,  '0078'	,19),
		    (338,  '0200'	,10),
		    (339,  '0160'	,21),
		    (340,  '0150'	,69),
		    (341,  '0050'	,18),
		    (342,  '0320'	,30),
		    (343,  '0180'	,58),
		    (344,  '0050'	,39),
		    (345,  '0080'	,47),
		    (346,  '0010'	,23),
		    (347,  '0030'	,33),
		    (348,  '0050'	,51),
		    (349,  '0080'	,39),
		    (350,  '0040'	,34),
		    (351,  '0030'	,61),
		    (352,  '0100'	,3),
		    (353,  '0050'	,27),
		    (354,  '0040'	,65),
		    (355,  '0010'	,56),
		    (356,  '0090'	,51),
		    (357,  '0085'	,19),
		    (358,  '0020'	,51),
		    (359,  '0100'	,27),
		    (360,  '0100'	,18),
		    (361,  '0070'	,44),
		    (362,  '0010'	,44),
		    (363,  '0030'	,37),
		    (364,  '0350'	,30),
		    (365,  '0050'	,37),
		    (366,  '0070'	,43),
		    (367,  '0080'	,43),
		    (368,  '0070'	,36),
		    (369,  '0010'	,37),
		    (370,  '0080'	,36),
		    (371,  '0010'	,43),
		    (372,  '0010'	,41),
		    (373,  '0060'	,43),
		    (374,  '0050'	,43),
		    (375,  '0050'	,35),
		    (376,  '0200'	,61),
		    (377,  '0010'	,27),
		    (378,  '0030'	,14)
	)
AS Source (
			[Id],
			[TaskCode],
		    [GroupCode]
		  )

ON Source.[Id] = Target.[Id]

WHEN MATCHED THEN
UPDATE SET [TaskCode]  = Source.[TaskCode],
		   [GroupCode] = Source.[GroupCode]


WHEN NOT MATCHED BY Target THEN
INSERT (
		[TaskCode],
		[GroupCode]
		)
		VALUES
		(
		[TaskCode],
		[GroupCode]
		)

WHEN NOT MATCHED BY Source THEN
DELETE;

GO
MERGE INTO [etl].[TaskStatus] AS Target
USING (VALUES
			(1,'TSCO REL'),
			(2,'TSCO CANC'),
			(3,'TSRL REL'),
			(4,'TSCO TSSC REL'),
			(5,'TSOS REL'),
			(6,'TSCO TSSC CANC'),
			(7,'TSOS CANC'),
			(8,'TSCO RREL')
	)
AS Source (
			[Id],
		  	[TaskStatus]
		 )
ON Source.[Id] = Target.[Id]

WHEN MATCHED THEN
UPDATE SET [TaskStatus] = Source.[TaskStatus]

WHEN NOT MATCHED BY Target THEN
INSERT (
		[TaskStatus]
		)
		VALUES
		(
		[TaskStatus]
		)

WHEN NOT MATCHED BY Source THEN
DELETE;

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [etl].[InactiveTask] WITH CHECK CHECK CONSTRAINT [FK_Inactive_Task];

ALTER TABLE [etl].[PlanningTaskCode] WITH CHECK CHECK CONSTRAINT [FK_Planning];

ALTER TABLE [etl].[LayoutProcessingTasks] WITH CHECK CHECK CONSTRAINT [FK_Layout_LayoutType];

ALTER TABLE [etl].[LayoutProcessingTasks] WITH CHECK CHECK CONSTRAINT [FK_Layout_Material];

ALTER TABLE [etl].[LayoutProcessingTasks] WITH CHECK CHECK CONSTRAINT [FK_Layout_TaskCode];

ALTER TABLE [etl].[LayoutProcessingTasks] WITH CHECK CHECK CONSTRAINT [FK_Layout_Supplier];

ALTER TABLE [etl].[LayoutProcessingTasks] WITH CHECK CHECK CONSTRAINT [FK_Layout_TaskOwner];

ALTER TABLE [etl].[LayoutProcessingTasks] WITH CHECK CHECK CONSTRAINT [FK_Layout_TaskStatus];

ALTER TABLE [etl].[Material] WITH CHECK CHECK CONSTRAINT [FK_Material_Category];

ALTER TABLE [etl].[TaskCode] WITH CHECK CHECK CONSTRAINT [FK_Group];

ALTER TABLE [etl].[LayoutType] WITH CHECK CHECK CONSTRAINT [FK_LayoutType_Notif];

ALTER TABLE [etl].[LayoutType] WITH CHECK CHECK CONSTRAINT [FK_LayoutType_DamageCode];

ALTER TABLE [etl].[LayoutType] WITH CHECK CHECK CONSTRAINT [FK_LayoutType_CauseCode];

ALTER TABLE [etl].[EngineProgram] WITH CHECK CHECK CONSTRAINT [FK_EngProg_Coding];

ALTER TABLE [model].[TaskDurationPrediction] WITH CHECK CHECK CONSTRAINT [FK_ModelInput];


GO
PRINT N'Update complete.';


GO
